type Query {
    awCaConfig: AwCaConfig @resolver(class: "Aheadworks\\CaGraphQl\\Model\\Resolver\\Config\\General") @doc(description: "The query returns company accounts general config")
    awCaIsRegistrationAllowedFlag (
        registrationType: String! @doc(description: "Possible input values: [customer, company]")
    ): Boolean @resolver(class: "Aheadworks\\CaGraphQl\\Model\\Resolver\\Config\\IsRegistrationAllowedFlag") @doc(description: "Check if it's allowed to register new company or customer")

    awCaGetCompanyForCurrentCustomer: AwCaCompany @resolver(class: "\\Aheadworks\\CaGraphQl\\Model\\Resolver\\CompanyForCurrentCustomer") @doc(description:"Returns company for currently logged in customer in case it exists") @cache(cacheable: false)

    awCaGetCurrentCompanyUser: AwCaUser @resolver(class: "\\Aheadworks\\CaGraphQl\\Model\\Resolver\\CurrentCompanyUser") @doc(description:"Returns currently logged in company user in case it exists") @cache(cacheable: false)
    awCaGetCompanyUser(
        customer_id: Int!
    ): AwCaUser @resolver(class: "\\Aheadworks\\CaGraphQl\\Model\\Resolver\\CompanyUser") @doc(description:"Returns any company user in case it exists") @cache(cacheable: false)
    awCaCompanyUserList (
        pageSize: Int = 20,
        currentPage: Int = 1
    ): AwCaCompanyUserSearchResult @resolver(class: "Aheadworks\\CaGraphQl\\Model\\Resolver\\CompanyUser\\CompanyUserList") @doc(description:"Returns all company users") @cache(cacheable: false)
    awCaIsEmailAvailableChecker (
        email: String! @doc(description: "Email to check if exists for company user or company itself")
    ): awCaEmailAvailabilityResult @resolver(class: "Aheadworks\\CaGraphQl\\Model\\Resolver\\IsEmailAvailable") @doc(description: "Returns the result of email evailability")

    awCaRoleList (
        pageSize: Int = 20,
        currentPage: Int = 1
    ): AwCaCompanyRoleSearchResult @resolver(class: "Aheadworks\\CaGraphQl\\Model\\Resolver\\Role\\RoleList") @doc(description:"Returns all company roles") @cache(cacheable: false)
    awCaGetCompanyRole(
        role_id: Int!
    ): AwCaCompanyRole @resolver(class: "\\Aheadworks\\CaGraphQl\\Model\\Resolver\\Role") @doc(description:"Returns company role in case it exists") @cache(cacheable: false)

    awCaCompanyDomainList (
        pageSize: Int = 20,
        currentPage: Int = 1
    ): AwCaCompanyDomainSearchResult @resolver(class: "Aheadworks\\CaGraphQl\\Model\\Resolver\\Domain\\DomainList") @doc(description:"Returns all company domains") @cache(cacheable: false)

    awCaHistoryLogList (
        filter: awCaHistoryLogFilterInput,
        pageSize: Int = 20,
        currentPage: Int = 1
    ): awCaHistoryLogSearchResult @resolver(class: "\\Aheadworks\\CaGraphQl\\Model\\Resolver\\HistoryLog\\HistoryLogListResolver") @doc(description:"Returns all company history log entries") @cache(cacheable: false)

    awCaAutorizationCheckerByResource (
        resource: String! @doc(description: "Resource name, e.g. Aheadworks_Ca::companies_edit")
    ): Boolean @resolver(class: "Aheadworks\\CaGraphQl\\Model\\Resolver\\Authorization\\CheckerByResource") @doc(description: "Check whether resource is allowed for current user or not") @cache(cacheable: false)
    awCaAutorizationGetAclResourceStructure: [awCaAclResource] @resolver(class: "Aheadworks\\CaGraphQl\\Model\\Resolver\\Authorization\\GetResourceStructure") @doc(description: "Get acl structure to see available resources") @cache(cacheable: false)
    awCaAutorizationGetAclResourceKeys: [String] @resolver(class: "Aheadworks\\CaGraphQl\\Model\\Resolver\\Authorization\\GetResourceKeys") @doc(description: "Get acl resource keys") @cache(cacheable: false)

    awCaIsOrderApprovalRequiredForCart (
        cart_id: String! @doc(description: "Customer cart hash")
    ): Boolean @resolver(class: "Aheadworks\\CaGraphQl\\Model\\Resolver\\OrderApproval\\IsRequiredForCartChecker") @doc(description: "Check if order approval is required for cart") @cache(cacheable: false)
    awCaIsOrderApprovalRequiredForOrder (
        order_id: String! @doc(description: "Customer order ID")
    ): Boolean @resolver(class: "Aheadworks\\CaGraphQl\\Model\\Resolver\\OrderApproval\\IsRequiredForOrderChecker") @doc(description: "Check if order approval is required for order") @cache(cacheable: false)
}

type Mutation {
    awCaCompanyCreate (
        company: awCaCompanyCreationInput!
        extension_attributes: awCaCompanyExtAttrInput
        firstname: String!
        lastname: String!
        email: String!
        prefix: String
        taxvat: String
        dob: String
    ): AwCaCompany @resolver(class: "\\Aheadworks\\CaGraphQl\\Model\\Resolver\\Mutation\\Company\\Create")

    awCaCompanyUpdate (
        company: awCaCompanyUpdateInput!
        extension_attributes: awCaCompanyExtAttrInput
        firstname: String!
        lastname: String!
        email: String!
        prefix: String
        taxvat: String
        dob: String
    ): AwCaCompany @resolver(class: "\\Aheadworks\\CaGraphQl\\Model\\Resolver\\Mutation\\Company\\Update")

    awCaAddNewDomain (
        name: String!
    ): AwCaCompanyDomain @resolver(class: "\\Aheadworks\\CaGraphQl\\Model\\Resolver\\Mutation\\Domain\\AddNew")  @doc(description:"Mutation to create new company domain for current company") @cache(cacheable: false)
    awCaDeleteDomain (
        id: Int! @doc(description:"Domain ID")
    ): Boolean @resolver(class: "\\Aheadworks\\CaGraphQl\\Model\\Resolver\\Mutation\\Domain\\Delete")  @doc(description:"Mutation to remove existing company domain for current company") @cache(cacheable: false)
    awCaActivateDomain (
        id: Int! @doc(description:"Domain ID")
    ): AwCaCompanyDomain @resolver(class: "\\Aheadworks\\CaGraphQl\\Model\\Resolver\\Mutation\\Domain\\Activate")  @doc(description:"Mutation to activate existing company domain for current company") @cache(cacheable: false)
    awCaDeactivateDomain (
        id: Int! @doc(description:"Domain ID")
    ): AwCaCompanyDomain @resolver(class: "\\Aheadworks\\CaGraphQl\\Model\\Resolver\\Mutation\\Domain\\Deactivate")  @doc(description:"Mutation to deactivate existing company domain for current company") @cache(cacheable: false)

    awCaAddNewCompanyUser (
        firstname: String!
        lastname: String!
        email: String!
        prefix: String
        taxvat: String
        dob: String
        extension_attributes: awCaCompanyUserExtAttrInput
    ): AwCaUser @resolver(class: "\\Aheadworks\\CaGraphQl\\Model\\Resolver\\Mutation\\User\\Create")  @doc(description:"Mutation to create new company user for current company") @cache(cacheable: false)
    awCaUpdateCompanyUser (
        id: Int!
        firstname: String
        lastname: String
        email: String
        prefix: String
        taxvat: String
        dob: String
        extension_attributes: awCaCompanyUserExtAttrInput
    ): AwCaUser @resolver(class: "\\Aheadworks\\CaGraphQl\\Model\\Resolver\\Mutation\\User\\Update")  @doc(description:"Mutation to update company user for current company") @cache(cacheable: false)
    awCaActivateCompanyUser (
        customer_id: Int! @doc(description:"Customer ID")
    ): Boolean @resolver(class: "\\Aheadworks\\CaGraphQl\\Model\\Resolver\\Mutation\\User\\Activate")  @doc(description:"Mutation to activate existing customer user for current company") @cache(cacheable: false)
    awCaDeactivateCompanyUser (
        customer_id: Int! @doc(description:"Customer ID")
    ): Boolean @resolver(class: "\\Aheadworks\\CaGraphQl\\Model\\Resolver\\Mutation\\User\\Deactivate")  @doc(description:"Mutation to deactivate existing customer user for current company") @cache(cacheable: false)

    awCaSaveCompanyRole (
        id: Int
        name: String
        default: Boolean @doc(description:"Is role set as default flag")
        permissions: [String]
        aw_stc_base_amount_limit: Float
        aw_rp_base_amount_limit: Float
        order_base_amount_limit: Float
    ): AwCaCompanyRole @resolver(class: "\\Aheadworks\\CaGraphQl\\Model\\Resolver\\Mutation\\Role\\Save")  @doc(description:"Mutation to save company role for current company") @cache(cacheable: false)

    awCaApproveOrder (
        order_id: String!
    ): Boolean @resolver(class: "\\Aheadworks\\CaGraphQl\\Model\\Resolver\\Mutation\\OrderApproval\\Approve")  @doc(description:"Mutation to approve order placed by company member") @cache(cacheable: false)
    awCaRejectOrder (
        order_id: String!
    ): Boolean @resolver(class: "\\Aheadworks\\CaGraphQl\\Model\\Resolver\\Mutation\\OrderApproval\\Reject")  @doc(description:"Mutation to reject order placed by company member") @cache(cacheable: false)
}

input awCaCompanyCreationInput {
    name: String!
    legal_name: String
    tax_id: String
    re_seller_id: String
    street: String
    city: String
    postcode: String
    telephone: String
    country_id: String
    region_id: String
    email: String!
    region: String
}

input awCaCompanyUpdateInput {
    id: Int!
    name: String!
    legal_name: String
    email: String!
    tax_id: String
    re_seller_id: String
    street: String
    city: String
    postcode: String
    telephone: String
    country_id: String
    region_id: String
    region: String
}

input awCaCompanyExtAttrInput {
    aw_ca_company_user: awCaCompanyUserInput
}

input awCaCompanyUserInput {
    job_title: String,
    telephone: String,
    additional_info: String
}

input awCaCompanyUserExtAttrInput {
    aw_ca_company_user: awCaCompanyUserExtendedInput
}

input awCaCompanyUserExtendedInput {
    job_title: String,
    telephone: String,
    additional_info: String
    company_role_id: Int!
}

input awCaHistoryLogFilterInput {
    customer_name: FilterTypeInput
    customer_id: FilterTypeInput
    time: FilterTypeInput
    performed_action: FilterTypeInput
    values_set_to: FilterTypeInput
    entity_type: FilterTypeInput
    entity_id: FilterTypeInput
    or: awCaHistoryLogFilterInput
}

type AwCaConfig @doc(description: "Company accounts module configuration") {
    is_module_enabled: Boolean @doc(description: "Flag to check whether module is enabled"),
    is_order_approval_enabled: Boolean @doc(description: "Flag to check whether order approval feature is enabled"),
    is_history_log_enabled: Boolean @doc(description: "Flag to check whether history log is enabled")
}

type AwCaCompany {
    id: Int,
    root_group_id: Int,
    status: String,
    name: String,
    legal_name: String,
    email: String,
    tax_id: String,
    re_seller_id: String,
    street: String,
    city: String,
    country_id: String,
    region: String,
    region_id: String,
    postcode: String,
    telephone: String,
    sales_representative_id: Int,
    customer_group_id: Int,
    is_allowed_to_quote: Boolean,
    is_approved_notification_sent: Boolean,
    is_declined_notification_sent: Boolean,
    created_at: String,
    notes: String,
    allowed_payment_methods: [String],
    allowed_shipping_methods: [String]
}

type AwCaUser {
    id: Int
    firstname: String
    lastname: String
    email: String
    extension_attributes: AwCaUserExtAttr
}
type AwCaUserExtAttr {
    aw_ca_company_user: AwCaCompanyUser
}
type AwCaCompanyUser {
    customer_id: Int,
    company_id: Int,
    is_root: Boolean
    status: Int,
    company_group_id: Int,
    company_role_id: Int,
    job_title: String,
    telephone: String,
    additional_info: String
}

type awCaEmailAvailabilityResult {
    is_available_for_company: Boolean
    is_available_for_customer: Boolean
}

type AwCaCompanyRoleSearchResult {
    total_count: Int
    items: [AwCaCompanyRole]
    page_info: AwCaPageInfo
}

type AwCaCompanyUserSearchResult {
    total_count: Int
    items: [AwCaUser]
    page_info: AwCaPageInfo
}

type AwCaCompanyDomainSearchResult {
    total_count: Int
    items: [AwCaCompanyDomain]
    page_info: AwCaPageInfo
}

type awCaHistoryLogSearchResult {
    total_count: Int
    items: [awCaHistoryLog]
    page_info: AwCaPageInfo
}

type AwCaPageInfo {
    page_size: Int
    current_page: Int
}

type AwCaCompanyRole {
    id: Int,
    company_id: Int,
    name: String
    permissions: [AwCaCompanyRolePermission],
    count_users: Int,
    default: Boolean,
    aw_stc_base_amount_limit: Float,
    aw_rp_base_amount_limit: Float,
    order_base_amount_limit: Float
}

type AwCaCompanyRolePermission {
    resource_id: String,
    permission: String
}

type AwCaCompanyDomain {
    id: Int,
    company_id: Int,
    name: String
    status: String
    is_approved_notification_sent: Boolean
}

type awCaHistoryLog {
    id: Int,
    company_id: Int,
    ip: String
    customer_name: String
    customer_id: Int
    time: String
    performed_action: String
    values_set_to: String
    entity_type: Boolean
    entity_id: Int
}

type awCaAclResource {
    id: String
    title: String
    sortOrder: Int
    children: [awCaAclResource]
}
